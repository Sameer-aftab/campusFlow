<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/lib/pdf-generator.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/lib/pdf-generator.ts" />
              <option name="originalContent" value="&#10;import jsPDF from 'jspdf';&#10;import { format } from 'date-fns';&#10;import type { Student, CertificateType } from './definitions';&#10;&#10;// --- HELPER FUNCTIONS ---&#10;&#10;function formatValue(value: string | null | undefined): string {&#10;    return value || '________________';&#10;}&#10;&#10;function formatDate(date: Date | null | undefined): string {&#10;    if (!date) return '________________';&#10;    try {&#10;        return format(new Date(date), 'dd-MM-yyyy');&#10;    } catch (error) {&#10;        return '________________';&#10;    }&#10;}&#10;&#10;// Function to fetch image and convert to Base64&#10;async function getBase64Image(url: string): Promise&lt;string&gt; {&#10;    try {&#10;        const response = await fetch(url);&#10;        if (!response.ok) {&#10;            throw new Error(`Failed to fetch image: ${response.statusText}`);&#10;        }&#10;        const blob = await response.blob();&#10;        return new Promise((resolve, reject) =&gt; {&#10;            const reader = new FileReader();&#10;            reader.onloadend = () =&gt; resolve(reader.result as string);&#10;            reader.onerror = reject;&#10;            reader.readAsDataURL(blob);&#10;        });&#10;    } catch (error) {&#10;        console.error(`Error fetching or converting image from ${url}:`, error);&#10;        return '';&#10;    }&#10;}&#10;&#10;&#10;function drawTextWithBoldAndUnderline(doc: jsPDF, text: string, x: number, y: number, maxWidth: number, lineSpacing: number, align: 'left' | 'center' | 'right') {&#10;    const parts = text.split(/(&lt;b&gt;&lt;u&gt;.*?&lt;\/u&gt;&lt;\/b&gt;)/g).filter(p =&gt; p);&#10;    let currentX = x;&#10;    let currentY = y;&#10;&#10;    // Calculate total width of one line for centering&#10;    const getLineWidth = (lineParts: { text: string; isStyled: boolean }[]): number =&gt; {&#10;        let width = 0;&#10;        lineParts.forEach(part =&gt; {&#10;            doc.setFont('helvetica', part.isStyled ? 'bold' : 'normal');&#10;            width += doc.getTextWidth(part.text);&#10;        });&#10;        return width;&#10;    };&#10;&#10;    const lines = doc.splitTextToSize(text.replace(/&lt;b&gt;&lt;u&gt;|&lt;\/u&gt;&lt;\/b&gt;/g, ''), maxWidth);&#10;&#10;    lines.forEach((line: string) =&gt; {&#10;        const lineParts: { text: string; isStyled: boolean }[] = [];&#10;        let remainingLine = line;&#10;&#10;        // This is a simplified parser. It reconstructs styled parts within a single line.&#10;        // It assumes styled sections don't break across lines, which is true for our short dynamic values.&#10;        const regex = /&lt;b&gt;&lt;u&gt;(.*?)&lt;\/u&gt;&lt;\/b&gt;/g;&#10;        let match;&#10;        let lastIndex = 0;&#10;        &#10;        // A placeholder trick to find styled parts in the line&#10;        const tempText = text.replace(line, `__LINE_START__${line}__LINE_END__`);&#10;        const styledPartsInOriginal = [...text.matchAll(regex)].map(m =&gt; m[1]);&#10;&#10;        let reconstructedLine = line;&#10;        styledPartsInOriginal.forEach(styledPart =&gt; {&#10;            if(reconstructedLine.includes(styledPart)) {&#10;                 reconstructedLine = reconstructedLine.replace(styledPart, `&lt;b&gt;&lt;u&gt;${styledPart}&lt;/u&gt;&lt;/b&gt;`);&#10;            }&#10;        });&#10;        &#10;        const finalParts = reconstructedLine.split(/(&lt;b&gt;&lt;u&gt;.*?&lt;\/u&gt;&lt;\/b&gt;)/g).filter(p =&gt; p);&#10;&#10;        let startX = x;&#10;        if (align === 'center') {&#10;            const totalWidth = getLineWidth(finalParts.map(p =&gt; ({text: p.replace(/&lt;b&gt;&lt;u&gt;|&lt;\/u&gt;&lt;\/b&gt;/g, ''), isStyled: p.startsWith('&lt;b&gt;')})));&#10;            startX = x + (maxWidth - totalWidth) / 2;&#10;        }&#10;        &#10;        currentX = startX;&#10;&#10;        finalParts.forEach(part =&gt; {&#10;            const isStyled = part.startsWith('&lt;b&gt;&lt;u&gt;') &amp;&amp; part.endsWith('&lt;/u&gt;&lt;/b&gt;');&#10;            const cleanPart = part.replace(/&lt;b&gt;&lt;u&gt;|&lt;\/u&gt;&lt;\/b&gt;/g, '');&#10;            &#10;            doc.setFont('helvetica', isStyled ? 'bold' : 'normal');&#10;            doc.text(cleanPart, currentX, currentY);&#10;            const partWidth = doc.getTextWidth(cleanPart);&#10;&#10;            if (isStyled) {&#10;                const underlineY = currentY + 1;&#10;                doc.setLineWidth(0.3);&#10;                doc.line(currentX, underlineY, currentX + partWidth, underlineY);&#10;            }&#10;            currentX += partWidth;&#10;        });&#10;&#10;        currentY += lineSpacing;&#10;    });&#10;}&#10;&#10;&#10;function drawFooter(doc: jsPDF, pageHeight: number, margin: number, pageWidth: number) {&#10;    const footerY = pageHeight - 10;&#10;    doc.setFontSize(12);&#10;    doc.setFont('helvetica', 'normal');&#10;&#10;    // Date&#10;    const dateLabel = 'Date: ';&#10;    const dateValue = format(new Date(), 'MMMM dd, yyyy');&#10;    doc.text(dateLabel, margin, footerY);&#10;    const dateLabelWidth = doc.getTextWidth(dateLabel);&#10;    const dateValueWidth = doc.getTextWidth(dateValue);&#10;    doc.text(dateValue, margin + dateLabelWidth, footerY);&#10;    doc.setLineWidth(0.3);&#10;    doc.line(margin + dateLabelWidth, footerY + 1, margin + dateLabelWidth + dateValueWidth, footerY + 1);&#10;&#10;&#10;    // Titles&#10;    const faText = 'First Assistant';&#10;    const chText = 'Chief Headmaster';&#10;    &#10;    const faWidth = doc.getTextWidth(faText);&#10;    const chWidth = doc.getTextWidth(chText);&#10;&#10;    const faX = pageWidth / 2 - faWidth / 2;&#10;    const chX = pageWidth - margin - chWidth;&#10;    &#10;    const signatureLineY = footerY - 2;&#10;&#10;    // Draw lines for signatures ABOVE text&#10;    doc.line(faX, signatureLineY, faX + faWidth, signatureLineY);&#10;    doc.line(chX, signatureLineY, chX + chWidth, signatureLineY);&#10;&#10;&#10;    // Draw text below lines&#10;    doc.text(faText, faX, footerY);&#10;    doc.text(chText, chX, footerY);&#10;}&#10;&#10;&#10;// --- CERTIFICATE DRAWING FUNCTIONS ---&#10;&#10;async function drawAppearanceCertificate(doc: jsPDF, student: Student, grade?: string) {&#10;    const logoBase64 = await getBase64Image(window.location.origin + '../../app/assets/Logo.png');&#10;    &#10;    const pageWidth = doc.internal.pageSize.getWidth();&#10;    const pageHeight = doc.internal.pageSize.getHeight();&#10;    const margin = 15;&#10;    const contentWidth = pageWidth - (margin * 2);&#10;    let y = 15;&#10;&#10;    doc.setDrawColor(0);&#10;    doc.setLineWidth(1);&#10;    doc.rect(5, 5, pageWidth - 10, pageHeight - 10);&#10;    doc.setLineWidth(0.5);&#10;    doc.rect(7, 7, pageWidth - 14, pageHeight - 14);&#10;&#10;    doc.setFont('helvetica', 'bold');&#10;    doc.setFontSize(16);&#10;    doc.text('Govt: (N) NOOR MUHAMMAD', pageWidth / 2, y, { align: 'center' });&#10;    y += 7;&#10;    doc.text('HIGH SCHOOL HYDERABAD', pageWidth / 2, y, { align: 'center' });&#10;    &#10;    if (logoBase64) {&#10;      y += 5;&#10;      doc.addImage(logoBase64, 'PNG', (pageWidth / 2) - 15, y, 30, 30);&#10;    }&#10;    y += 35; &#10;    &#10;    doc.setFontSize(14);&#10;    doc.text('APPEARANCE CERTIFICATE', pageWidth / 2, y, { align: 'center' });&#10;    y += 10;&#10;&#10;    doc.setFont('helvetica', 'normal');&#10;    doc.setFontSize(12);&#10;&#10;    const currentYear = new Date().getFullYear();&#10;    const finalGrade = grade || student.grade;&#10;    const bodyText = `This is to certify that &lt;b&gt;&lt;u&gt;${student.studentName}&lt;/u&gt;&lt;/b&gt; S/O &lt;b&gt;&lt;u&gt;${student.fatherName}&lt;/u&gt;&lt;/b&gt; was a bonafide student of this School from &lt;b&gt;&lt;u&gt;${formatDate(student.admissionDate)}&lt;/u&gt;&lt;/b&gt; to &lt;b&gt;&lt;u&gt;${student.dateOfLeaving ? formatDate(student.dateOfLeaving) : formatDate(new Date())}&lt;/u&gt;&lt;/b&gt;. He has filled the form of SSC part II Annual Examination &lt;b&gt;&lt;u&gt;${currentYear}&lt;/u&gt;&lt;/b&gt; and it is expected that he will secure atleast Grade &lt;b&gt;&lt;u&gt;${finalGrade}&lt;/u&gt;&lt;/b&gt; at the above said Examination. His date of birth as entered in this School General Register is &lt;b&gt;&lt;u&gt;${formatDate(student.dateOfBirth)}&lt;/u&gt;&lt;/b&gt;. He bears a good Character and I wish him success in future.`;&#10;    &#10;    drawTextWithBoldAndUnderline(doc, bodyText, margin, y, contentWidth, 6, 'center');&#10;&#10;    drawFooter(doc, pageHeight, margin, pageWidth);&#10;}&#10;&#10;async function drawCharacterCertificate(doc: jsPDF, student: Student, character?: string) {&#10;    const logoBase64 = await getBase64Image(window.location.origin + '../../app/assets/Logo.png');&#10;    const pageWidth = doc.internal.pageSize.getWidth();&#10;    const pageHeight = doc.internal.pageSize.getHeight();&#10;    const margin = 15;&#10;    const contentWidth = pageWidth - (margin * 2);&#10;    let y = 15;&#10;&#10;    doc.setDrawColor(0);&#10;    doc.setLineWidth(1);&#10;    doc.rect(5, 5, pageWidth - 10, pageHeight - 10);&#10;    doc.setLineWidth(0.5);&#10;    doc.rect(7, 7, pageWidth - 14, pageHeight - 14);&#10;    doc.setFont('helvetica', 'bold');&#10;    doc.setFontSize(16);&#10;    doc.text('Govt: (N) NOOR MUHAMMAD', pageWidth / 2, y, { align: 'center' });&#10;    y += 7;&#10;    doc.text('HIGH SCHOOL HYDERABAD', pageWidth / 2, y, { align: 'center' });&#10;&#10;    if(logoBase64) {&#10;      y += 5;&#10;      doc.addImage(logoBase64, 'PNG', (pageWidth / 2) - 15, y, 30, 30);&#10;    }&#10;    y += 35;&#10;    &#10;    doc.setFontSize(14);&#10;    doc.text('CHARACTER CERTIFICATE', pageWidth / 2, y, { align: 'center' });&#10;    y += 10;&#10;&#10;    doc.setFont('helvetica', 'normal');&#10;    doc.setFontSize(12);&#10;    const finalCharacter = character || student.conduct;&#10;    const bodyText = `This is to certify that &lt;b&gt;&lt;u&gt;${student.studentName}&lt;/u&gt;&lt;/b&gt;, S/O &lt;b&gt;&lt;u&gt;${student.fatherName}&lt;/u&gt;&lt;/b&gt; was a bonafide student of this School from &lt;b&gt;&lt;u&gt;${formatDate(student.admissionDate)}&lt;/u&gt;&lt;/b&gt; to &lt;b&gt;&lt;u&gt;${student.dateOfLeaving ? formatDate(student.dateOfLeaving) : formatDate(new Date())}&lt;/u&gt;&lt;/b&gt;. To the best of my knowledge he bears a &lt;b&gt;&lt;u&gt;${finalCharacter}&lt;/u&gt;&lt;/b&gt; Moral character. I wish him good luck.`;&#10;    &#10;    drawTextWithBoldAndUnderline(doc, bodyText, margin, y, contentWidth, 6, 'center');&#10;&#10;    drawFooter(doc, pageHeight, margin, pageWidth);&#10;}&#10;&#10;async function drawPassCertificate(doc: jsPDF, student: Student) {&#10;    const logoBase64 = await getBase64Image(window.location.origin + '../../app/assets/Logo.png');&#10;    const pageWidth = doc.internal.pageSize.getWidth();&#10;    const pageHeight = doc.internal.pageSize.getHeight();&#10;    const margin = 15;&#10;    const contentWidth = pageWidth - (margin * 2);&#10;    let y = 15;&#10;&#10;    doc.setDrawColor(0);&#10;    doc.setLineWidth(1);&#10;    doc.rect(5, 5, pageWidth - 10, pageHeight - 10);&#10;    doc.setLineWidth(0.5);&#10;    doc.rect(7, 7, pageWidth - 14, pageHeight - 14);&#10;    doc.setFont('helvetica', 'bold');&#10;    doc.setFontSize(16);&#10;    doc.text('Govt: (N) NOOR MUHAMMAD', pageWidth / 2, y, { align: 'center' });&#10;    y += 7;&#10;    doc.text('HIGH SCHOOL HYDERABAD', pageWidth / 2, y, { align: 'center' });&#10;&#10;    if(logoBase64) {&#10;      y += 5;&#10;      doc.addImage(logoBase64, 'PNG', (pageWidth / 2) - 15, y, 30, 30);&#10;    }&#10;    y += 35;&#10;    &#10;    doc.setFontSize(14);&#10;    doc.text('PASS CERTIFICATE', pageWidth / 2, y, { align: 'center' });&#10;    y += 10;&#10;    &#10;    doc.setFont('helvetica', 'normal');&#10;    doc.setFontSize(12);&#10;    const bodyText = `This is to certify that Mr. &lt;b&gt;&lt;u&gt;${formatValue(student.studentName)}&lt;/u&gt;&lt;/b&gt; S/o &lt;b&gt;&lt;u&gt;${formatValue(student.fatherName)}&lt;/u&gt;&lt;/b&gt; by Caste &lt;b&gt;&lt;u&gt;${formatValue(student.raceAndCaste)}&lt;/u&gt;&lt;/b&gt; was enrolled under G.R.No: &lt;b&gt;&lt;u&gt;${formatValue(student.grNo)}&lt;/u&gt;&lt;/b&gt; and has been a bonafied student of this school from &lt;b&gt;&lt;u&gt;${formatDate(student.admissionDate)}&lt;/u&gt;&lt;/b&gt; to &lt;b&gt;&lt;u&gt;${student.dateOfLeaving ? formatDate(student.dateOfLeaving) : formatDate(new Date())}&lt;/u&gt;&lt;/b&gt;. He has Passed class &lt;b&gt;&lt;u&gt;${formatValue(student.examination)}&lt;/u&gt;&lt;/b&gt;. According to School Record his date of Birth is &lt;b&gt;&lt;u&gt;${formatDate(student.dateOfBirth)}&lt;/u&gt;&lt;/b&gt; is in words &lt;b&gt;&lt;u&gt;${formatValue(student.dateOfBirthInWords)}&lt;/u&gt;&lt;/b&gt;. He bears a good moral and I wish him success in future.`;&#10;    &#10;    drawTextWithBoldAndUnderline(doc, bodyText, margin, y, contentWidth, 6, 'center');&#10;    &#10;    drawFooter(doc, pageHeight, margin, pageWidth);&#10;}&#10;&#10;&#10;async function drawLeavingCertificate(doc: jsPDF, student: Student, grade?: string) {&#10;    const logoBase64 = await getBase64Image(window.location.origin + '../../app/assets/Logo.png');&#10;    const pageWidth = doc.internal.pageSize.getWidth();&#10;    const pageHeight = doc.internal.pageSize.getHeight();&#10;    const margin = 15;&#10;    let y = 15;&#10;&#10;    // --- Border ---&#10;    doc.setDrawColor(0);&#10;    doc.setLineWidth(1.5);&#10;    doc.rect(5, 5, pageWidth - 10, pageHeight - 10);&#10;    &#10;    // --- Header ---&#10;    doc.setFont('helvetica', 'bold');&#10;    doc.setFontSize(20);&#10;    doc.text('Govt: (N) NOOR MUHAMMAD', pageWidth / 2, y, { align: 'center' });&#10;    y += 8;&#10;    doc.text('HIGH SCHOOL HYDERABAD', pageWidth / 2, y, { align: 'center' });&#10;    y += 7;&#10;    &#10;    if (logoBase64) {&#10;      doc.addImage(logoBase64, 'PNG', (pageWidth / 2) - 20, y, 40, 40);&#10;    }&#10;    y += 45;&#10;&#10;    doc.setFontSize(18);&#10;    doc.text('SCHOOL LEAVING CERTIFICATE', pageWidth / 2, y, { align: 'center' });&#10;    y += 15;&#10;&#10;    // --- Body ---&#10;    doc.setFont('helvetica', 'normal');&#10;    doc.setFontSize(11);&#10;    &#10;    const drawField = (label: string, value: string, startX: number, startY: number, fullWidth: boolean = false) =&gt; {&#10;        doc.setFont('helvetica', 'bold');&#10;        doc.text(label, startX, startY);&#10;        const labelWidth = doc.getTextWidth(label);&#10;        &#10;        doc.setFont('helvetica', 'bold');&#10;        const formattedValue = formatValue(value).toUpperCase();&#10;        doc.text(formattedValue, startX + labelWidth + 2, startY);&#10;        &#10;        const valueWidth = doc.getTextWidth(formattedValue);&#10;        const underlineWidth = fullWidth ? (pageWidth - startX - labelWidth - 2 - margin) : valueWidth + 4;&#10;        doc.setLineWidth(0.3);&#10;        doc.line(startX + labelWidth + 1, startY + 1, startX + labelWidth + 1 + underlineWidth, startY + 1);&#10;    };&#10;&#10;    drawField('Name of Student:', student.studentName, margin, y);&#10;    drawField('G.R No:', student.grNo, pageWidth - margin - 50, y);&#10;    y += 8;&#10;&#10;    drawField(&quot;Father's Name:&quot;, student.fatherName, margin, y, true);&#10;    y += 8;&#10;    drawField('Race and Caste (With Sub-Caste):', student.raceAndCaste, margin, y, true);&#10;    y += 8;&#10;    drawField('Religion:', student.religion, margin, y, true);&#10;    y += 8;&#10;    drawField('Place of Birth:', student.placeOfBirth, margin, y, true);&#10;    y += 8;&#10;    drawField('Date of Birth (in Figures):', formatDate(student.dateOfBirth), margin, y, true);&#10;    y += 8;&#10;    drawField('Date of Birth (in words):', student.dateOfBirthInWords, margin, y, true);&#10;    y += 8;&#10;    drawField('Last School Attended:', student.lastSchoolAttended, margin, y, true);&#10;    y += 8;&#10;    drawField('Date of Admission:', formatDate(student.admissionDate), margin, y, true);&#10;    y += 8;&#10;    drawField('Class in which admitted:', student.classInWhichAdmitted, margin, y, true);&#10;    y += 8;&#10;    drawField('Class in which studying:', student.classStudying, margin, y, true);&#10;    y += 8;&#10;&#10;    drawField('Progress:', student.progress, margin, y);&#10;    drawField('Conduct:', student.conduct, pageWidth / 2, y);&#10;    y += 8;&#10;    &#10;    drawField('Date of Leaving the School:', formatDate(student.dateOfLeaving), margin, y, true);&#10;    y += 8;&#10;    drawField('Reason of Leaving the School:', student.reasonOfLeaving, margin, y, true);&#10;    y += 12;&#10;&#10;    drawField('Examination:', student.examination, margin, y);&#10;    drawField('Under Seat No:', student.underSeatNo, margin + 80, y);&#10;    drawField('Grade:', grade || student.grade, margin + 140, y);&#10;    y += 15;&#10;    &#10;    doc.setFont('helvetica', 'bold');&#10;    doc.text('Certified that the above information is in accordance with the school General Register.', margin, y);&#10;    &#10;    // --- Footer ---&#10;    const footerYFinal = doc.internal.pageSize.getHeight() - 20;&#10;    doc.setFontSize(12);&#10;    doc.setFont('helvetica', 'normal');&#10;    drawField('Date:', format(new Date(), 'MMMM dd, yyyy'), margin, footerYFinal);&#10;&#10;    const firstAssistantText = 'First Assistant';&#10;    const chiefHeadmasterText = 'Chief Headmaster';&#10;    &#10;    const faX = pageWidth / 2 - (doc.getTextWidth(firstAssistantText) / 2);&#10;    const chX = pageWidth - margin - doc.getTextWidth(chiefHeadmasterText);&#10;&#10;    const signatureLineYFinal = footerYFinal - 2;&#10;    doc.line(faX, signatureLineYFinal, faX + doc.getTextWidth(firstAssistantText), signatureLineYFinal);&#10;    doc.line(chX, signatureLineYFinal, chX + doc.getTextWidth(chiefHeadmasterText), signatureLineYFinal);&#10;&#10;    doc.text(firstAssistantText, faX, footerYFinal);&#10;    &#10;    doc.text(chiefHeadmasterText, chX, footerYFinal);&#10;}&#10;&#10;&#10;// --- MAIN EXPORT FUNCTION ---&#10;&#10;export async function generatePdf(type: CertificateType, students: Student[], gradeOverride?: string, characterOverride?: string) {&#10;    let doc;&#10;&#10;    if (type === 'School Leaving') {&#10;        doc = new jsPDF({ orientation: 'portrait', unit: 'mm', format: 'a4' });&#10;    } else {&#10;        doc = new jsPDF({ orientation: 'landscape', unit: 'mm', format: 'a5' });&#10;    }&#10;&#10;    for (let i = 0; i &lt; students.length; i++) {&#10;        if (i &gt; 0) {&#10;            doc.addPage();&#10;        }&#10;        const student = students[i];&#10;        &#10;        switch (type) {&#10;            case 'Appearance':&#10;                await drawAppearanceCertificate(doc, student, gradeOverride);&#10;                break;&#10;            case 'Character':&#10;                await drawCharacterCertificate(doc, student, characterOverride);&#10;                break;&#10;            case 'Pass':&#10;                await drawPassCertificate(doc, student);&#10;                break;&#10;            case 'School Leaving':&#10;                await drawLeavingCertificate(doc, student, gradeOverride);&#10;                break;&#10;            default:&#10;                throw new Error('Invalid certificate type.');&#10;        }&#10;    }&#10;&#10;    return doc;&#10;}&#10;" />
              <option name="updatedContent" value="import jsPDF from 'jspdf';&#10;import { format } from 'date-fns';&#10;import type { Student, CertificateType } from './definitions';&#10;&#10;// --- HELPER FUNCTIONS ---&#10;&#10;function formatValue(value: string | null | undefined): string {&#10;    return value || '________________';&#10;}&#10;&#10;function formatDate(date: Date | null | undefined): string {&#10;    if (!date) return '________________';&#10;    try {&#10;        return format(new Date(date), 'dd-MM-yyyy');&#10;    } catch (error) {&#10;        return '________________';&#10;    }&#10;}&#10;&#10;// Function to fetch image and convert to Base64&#10;async function getBase64Image(url: string): Promise&lt;string&gt; {&#10;    try {&#10;        const response = await fetch(url);&#10;        if (!response.ok) {&#10;            throw new Error(`Failed to fetch image: ${response.statusText}`);&#10;        }&#10;        const blob = await response.blob();&#10;        return new Promise((resolve, reject) =&gt; {&#10;            const reader = new FileReader();&#10;            reader.onloadend = () =&gt; resolve(reader.result as string);&#10;            reader.onerror = reject;&#10;            reader.readAsDataURL(blob);&#10;        });&#10;    } catch (error) {&#10;        console.error(`Error fetching or converting image from ${url}:`, error);&#10;        return '';&#10;    }&#10;}&#10;&#10;&#10;function drawTextWithBoldAndUnderline(doc: jsPDF, text: string, x: number, y: number, maxWidth: number, lineSpacing: number, align: 'left' | 'center' | 'right') {&#10;    const parts = text.split(/(&lt;b&gt;&lt;u&gt;.*?&lt;\/u&gt;&lt;\/b&gt;)/g).filter(p =&gt; p);&#10;    let currentX = x;&#10;    let currentY = y;&#10;&#10;    // Calculate total width of one line for centering&#10;    const getLineWidth = (lineParts: { text: string; isStyled: boolean }[]): number =&gt; {&#10;        let width = 0;&#10;        lineParts.forEach(part =&gt; {&#10;            doc.setFont('helvetica', part.isStyled ? 'bold' : 'normal');&#10;            width += doc.getTextWidth(part.text);&#10;        });&#10;        return width;&#10;    };&#10;&#10;    const lines = doc.splitTextToSize(text.replace(/&lt;b&gt;&lt;u&gt;|&lt;\/u&gt;&lt;\/b&gt;/g, ''), maxWidth);&#10;&#10;    lines.forEach((line: string) =&gt; {&#10;        const lineParts: { text: string; isStyled: boolean }[] = [];&#10;        let remainingLine = line;&#10;&#10;        // This is a simplified parser. It reconstructs styled parts within a single line.&#10;        // It assumes styled sections don't break across lines, which is true for our short dynamic values.&#10;        const regex = /&lt;b&gt;&lt;u&gt;(.*?)&lt;\/u&gt;&lt;\/b&gt;/g;&#10;        let match;&#10;        let lastIndex = 0;&#10;        &#10;        // A placeholder trick to find styled parts in the line&#10;        const tempText = text.replace(line, `__LINE_START__${line}__LINE_END__`);&#10;        const styledPartsInOriginal = [...text.matchAll(regex)].map(m =&gt; m[1]);&#10;&#10;        let reconstructedLine = line;&#10;        styledPartsInOriginal.forEach(styledPart =&gt; {&#10;            if(reconstructedLine.includes(styledPart)) {&#10;                 reconstructedLine = reconstructedLine.replace(styledPart, `&lt;b&gt;&lt;u&gt;${styledPart}&lt;/u&gt;&lt;/b&gt;`);&#10;            }&#10;        });&#10;        &#10;        const finalParts = reconstructedLine.split(/(&lt;b&gt;&lt;u&gt;.*?&lt;\/u&gt;&lt;\/b&gt;)/g).filter(p =&gt; p);&#10;&#10;        let startX = x;&#10;        if (align === 'center') {&#10;            const totalWidth = getLineWidth(finalParts.map(p =&gt; ({text: p.replace(/&lt;b&gt;&lt;u&gt;|&lt;\/u&gt;&lt;\/b&gt;/g, ''), isStyled: p.startsWith('&lt;b&gt;')})));&#10;            startX = x + (maxWidth - totalWidth) / 2;&#10;        }&#10;        &#10;        currentX = startX;&#10;&#10;        finalParts.forEach(part =&gt; {&#10;            const isStyled = part.startsWith('&lt;b&gt;&lt;u&gt;') &amp;&amp; part.endsWith('&lt;/u&gt;&lt;/b&gt;');&#10;            const cleanPart = part.replace(/&lt;b&gt;&lt;u&gt;|&lt;\/u&gt;&lt;\/b&gt;/g, '');&#10;            &#10;            doc.setFont('helvetica', isStyled ? 'bold' : 'normal');&#10;            doc.text(cleanPart, currentX, currentY);&#10;            const partWidth = doc.getTextWidth(cleanPart);&#10;&#10;            if (isStyled) {&#10;                const underlineY = currentY + 1;&#10;                doc.setLineWidth(0.3);&#10;                doc.line(currentX, underlineY, currentX + partWidth, underlineY);&#10;            }&#10;            currentX += partWidth;&#10;        });&#10;&#10;        currentY += lineSpacing;&#10;    });&#10;}&#10;&#10;&#10;function drawFooter(doc: jsPDF, pageHeight: number, margin: number, pageWidth: number) {&#10;    const footerY = pageHeight - 10;&#10;    doc.setFontSize(12);&#10;    doc.setFont('helvetica', 'normal');&#10;&#10;    // Date&#10;    const dateLabel = 'Date: ';&#10;    const dateValue = format(new Date(), 'MMMM dd, yyyy');&#10;    doc.text(dateLabel, margin, footerY);&#10;    const dateLabelWidth = doc.getTextWidth(dateLabel);&#10;    const dateValueWidth = doc.getTextWidth(dateValue);&#10;    doc.text(dateValue, margin + dateLabelWidth, footerY);&#10;    doc.setLineWidth(0.3);&#10;    doc.line(margin + dateLabelWidth, footerY + 1, margin + dateLabelWidth + dateValueWidth, footerY + 1);&#10;&#10;&#10;    // Titles&#10;    const faText = 'First Assistant';&#10;    const chText = 'Chief Headmaster';&#10;    &#10;    const faWidth = doc.getTextWidth(faText);&#10;    const chWidth = doc.getTextWidth(chText);&#10;&#10;    const faX = pageWidth / 2 - faWidth / 2;&#10;    const chX = pageWidth - margin - chWidth;&#10;    &#10;    const signatureLineY = footerY - 2;&#10;&#10;    // Draw lines for signatures ABOVE text&#10;    doc.line(faX, signatureLineY, faX + faWidth, signatureLineY);&#10;    doc.line(chX, signatureLineY, chX + chWidth, signatureLineY);&#10;&#10;&#10;    // Draw text below lines&#10;    doc.text(faText, faX, footerY);&#10;    doc.text(chText, chX, footerY);&#10;}&#10;&#10;&#10;// --- CERTIFICATE DRAWING FUNCTIONS ---&#10;&#10;async function drawAppearanceCertificate(doc: jsPDF, student: Student, grade?: string) {&#10;    const logoBase64 = await getBase64Image(window.location.origin + '../../app/assets/Logo.png');&#10;    &#10;    const pageWidth = doc.internal.pageSize.getWidth();&#10;    const pageHeight = doc.internal.pageSize.getHeight();&#10;    const margin = 15;&#10;    const contentWidth = pageWidth - (margin * 2);&#10;    let y = 15;&#10;&#10;    doc.setDrawColor(0);&#10;    doc.setLineWidth(1);&#10;    doc.rect(5, 5, pageWidth - 10, pageHeight - 10);&#10;    doc.setLineWidth(0.5);&#10;    doc.rect(7, 7, pageWidth - 14, pageHeight - 14);&#10;&#10;    doc.setFont('helvetica', 'bold');&#10;    doc.setFontSize(16);&#10;    doc.text('Govt: (N) NOOR MUHAMMAD', pageWidth / 2, y, { align: 'center' });&#10;    y += 7;&#10;    doc.text('HIGH SCHOOL HYDERABAD', pageWidth / 2, y, { align: 'center' });&#10;    &#10;    if (logoBase64) {&#10;      y += 5;&#10;      doc.addImage(logoBase64, 'PNG', (pageWidth / 2) - 15, y, 30, 30);&#10;    }&#10;    y += 35; &#10;    &#10;    doc.setFontSize(14);&#10;    doc.text('APPEARANCE CERTIFICATE', pageWidth / 2, y, { align: 'center' });&#10;    y += 10;&#10;&#10;    doc.setFont('helvetica', 'normal');&#10;    doc.setFontSize(12);&#10;&#10;    const currentYear = new Date().getFullYear();&#10;    const finalGrade = grade || student.grade;&#10;    const bodyText = `This is to certify that &lt;b&gt;&lt;u&gt;${student.studentName}&lt;/u&gt;&lt;/b&gt; S/O &lt;b&gt;&lt;u&gt;${student.fatherName}&lt;/u&gt;&lt;/b&gt; was a bonafide student of this School from &lt;b&gt;&lt;u&gt;${formatDate(student.admissionDate)}&lt;/u&gt;&lt;/b&gt; to &lt;b&gt;&lt;u&gt;${student.dateOfLeaving ? formatDate(student.dateOfLeaving) : formatDate(new Date())}&lt;/u&gt;&lt;/b&gt;. He has filled the form of SSC part II Annual Examination &lt;b&gt;&lt;u&gt;${currentYear}&lt;/u&gt;&lt;/b&gt; and it is expected that he will secure atleast Grade &lt;b&gt;&lt;u&gt;${finalGrade}&lt;/u&gt;&lt;/b&gt; at the above said Examination. His date of birth as entered in this School General Register is &lt;b&gt;&lt;u&gt;${formatDate(student.dateOfBirth)}&lt;/u&gt;&lt;/b&gt;. He bears a good Character and I wish him success in future.`;&#10;    &#10;    drawTextWithBoldAndUnderline(doc, bodyText, margin, y, contentWidth, 6, 'center');&#10;&#10;    drawFooter(doc, pageHeight, margin, pageWidth);&#10;}&#10;&#10;async function drawCharacterCertificate(doc: jsPDF, student: Student, character?: string) {&#10;    const logoBase64 = await getBase64Image(window.location.origin + '../../app/assets/Logo.png');&#10;    const pageWidth = doc.internal.pageSize.getWidth();&#10;    const pageHeight = doc.internal.pageSize.getHeight();&#10;    const margin = 15;&#10;    const contentWidth = pageWidth - (margin * 2);&#10;    let y = 15;&#10;&#10;    doc.setDrawColor(0);&#10;    doc.setLineWidth(1);&#10;    doc.rect(5, 5, pageWidth - 10, pageHeight - 10);&#10;    doc.setLineWidth(0.5);&#10;    doc.rect(7, 7, pageWidth - 14, pageHeight - 14);&#10;    doc.setFont('helvetica', 'bold');&#10;    doc.setFontSize(16);&#10;    doc.text('Govt: (N) NOOR MUHAMMAD', pageWidth / 2, y, { align: 'center' });&#10;    y += 7;&#10;    doc.text('HIGH SCHOOL HYDERABAD', pageWidth / 2, y, { align: 'center' });&#10;&#10;    if(logoBase64) {&#10;      y += 5;&#10;      doc.addImage(logoBase64, 'PNG', (pageWidth / 2) - 15, y, 30, 30);&#10;    }&#10;    y += 35;&#10;    &#10;    doc.setFontSize(14);&#10;    doc.text('CHARACTER CERTIFICATE', pageWidth / 2, y, { align: 'center' });&#10;    y += 10;&#10;&#10;    doc.setFont('helvetica', 'normal');&#10;    doc.setFontSize(12);&#10;    const finalCharacter = character || student.conduct;&#10;    const bodyText = `This is to certify that &lt;b&gt;&lt;u&gt;${student.studentName}&lt;/u&gt;&lt;/b&gt;, S/O &lt;b&gt;&lt;u&gt;${student.fatherName}&lt;/u&gt;&lt;/b&gt; was a bonafide student of this School from &lt;b&gt;&lt;u&gt;${formatDate(student.admissionDate)}&lt;/u&gt;&lt;/b&gt; to &lt;b&gt;&lt;u&gt;${student.dateOfLeaving ? formatDate(student.dateOfLeaving) : formatDate(new Date())}&lt;/u&gt;&lt;/b&gt;. To the best of my knowledge he bears a &lt;b&gt;&lt;u&gt;${finalCharacter}&lt;/u&gt;&lt;/b&gt; Moral character. I wish him good luck.`;&#10;    &#10;    drawTextWithBoldAndUnderline(doc, bodyText, margin, y, contentWidth, 6, 'center');&#10;&#10;    drawFooter(doc, pageHeight, margin, pageWidth);&#10;}&#10;&#10;async function drawPassCertificate(doc: jsPDF, student: Student) {&#10;    const logoBase64 = await getBase64Image(window.location.origin + '../../app/assets/Logo.png');&#10;    const pageWidth = doc.internal.pageSize.getWidth();&#10;    const pageHeight = doc.internal.pageSize.getHeight();&#10;    const margin = 15;&#10;    const contentWidth = pageWidth - (margin * 2);&#10;    let y = 15;&#10;&#10;    doc.setDrawColor(0);&#10;    doc.setLineWidth(1);&#10;    doc.rect(5, 5, pageWidth - 10, pageHeight - 10);&#10;    doc.setLineWidth(0.5);&#10;    doc.rect(7, 7, pageWidth - 14, pageHeight - 14);&#10;    doc.setFont('helvetica', 'bold');&#10;    doc.setFontSize(16);&#10;    doc.text('Govt: (N) NOOR MUHAMMAD', pageWidth / 2, y, { align: 'center' });&#10;    y += 7;&#10;    doc.text('HIGH SCHOOL HYDERABAD', pageWidth / 2, y, { align: 'center' });&#10;&#10;    if(logoBase64) {&#10;      y += 5;&#10;      doc.addImage(logoBase64, 'PNG', (pageWidth / 2) - 15, y, 30, 30);&#10;    }&#10;    y += 35;&#10;    &#10;    doc.setFontSize(14);&#10;    doc.text('PASS CERTIFICATE', pageWidth / 2, y, { align: 'center' });&#10;    y += 10;&#10;    &#10;    doc.setFont('helvetica', 'normal');&#10;    doc.setFontSize(12);&#10;    const bodyText = `This is to certify that Mr. &lt;b&gt;&lt;u&gt;${formatValue(student.studentName)}&lt;/u&gt;&lt;/b&gt; S/o &lt;b&gt;&lt;u&gt;${formatValue(student.fatherName)}&lt;/u&gt;&lt;/b&gt; by Caste &lt;b&gt;&lt;u&gt;${formatValue(student.raceAndCaste)}&lt;/u&gt;&lt;/b&gt; was enrolled under G.R.No: &lt;b&gt;&lt;u&gt;${formatValue(student.grNo)}&lt;/u&gt;&lt;/b&gt; and has been a bonafied student of this school from &lt;b&gt;&lt;u&gt;${formatDate(student.admissionDate)}&lt;/u&gt;&lt;/b&gt; to &lt;b&gt;&lt;u&gt;${student.dateOfLeaving ? formatDate(student.dateOfLeaving) : formatDate(new Date())}&lt;/u&gt;&lt;/b&gt;. He has Passed class &lt;b&gt;&lt;u&gt;${formatValue(student.examination)}&lt;/u&gt;&lt;/b&gt;. According to School Record his date of Birth is &lt;b&gt;&lt;u&gt;${formatDate(student.dateOfBirth)}&lt;/u&gt;&lt;/b&gt; is in words &lt;b&gt;&lt;u&gt;${formatValue(student.dateOfBirthInWords)}&lt;/u&gt;&lt;/b&gt;. He bears a good moral and I wish him success in future.`;&#10;    &#10;    drawTextWithBoldAndUnderline(doc, bodyText, margin, y, contentWidth, 6, 'center');&#10;    &#10;    drawFooter(doc, pageHeight, margin, pageWidth);&#10;}&#10;&#10;&#10;async function drawLeavingCertificate(doc: jsPDF, student: Student, grade?: string) {&#10;    const logoBase64 = await getBase64Image(window.location.origin + '../../app/assets/Logo.png');&#10;    const pageWidth = doc.internal.pageSize.getWidth();&#10;    const pageHeight = doc.internal.pageSize.getHeight();&#10;    const margin = 15;&#10;    let y = 15;&#10;&#10;    // --- Border ---&#10;    doc.setDrawColor(0);&#10;    doc.setLineWidth(1.5);&#10;    doc.rect(5, 5, pageWidth - 10, pageHeight - 10);&#10;    &#10;    // --- Header ---&#10;    doc.setFont('helvetica', 'bold');&#10;    doc.setFontSize(20);&#10;    doc.text('Govt: (N) NOOR MUHAMMAD', pageWidth / 2, y, { align: 'center' });&#10;    y += 8;&#10;    doc.text('HIGH SCHOOL HYDERABAD', pageWidth / 2, y, { align: 'center' });&#10;    y += 7;&#10;    &#10;    if (logoBase64) {&#10;      doc.addImage(logoBase64, 'PNG', (pageWidth / 2) - 20, y, 40, 40);&#10;    }&#10;    y += 45;&#10;&#10;    doc.setFontSize(18);&#10;    doc.text('SCHOOL LEAVING CERTIFICATE', pageWidth / 2, y, { align: 'center' });&#10;    y += 15;&#10;&#10;    // --- Body ---&#10;    doc.setFont('helvetica', 'normal');&#10;    doc.setFontSize(11);&#10;    &#10;    const drawField = (label: string, value: string, startX: number, startY: number, fullWidth: boolean = false) =&gt; {&#10;        doc.setFont('helvetica', 'bold');&#10;        doc.text(label, startX, startY);&#10;        const labelWidth = doc.getTextWidth(label);&#10;        &#10;        doc.setFont('helvetica', 'bold');&#10;        const formattedValue = formatValue(value).toUpperCase();&#10;        doc.text(formattedValue, startX + labelWidth + 2, startY);&#10;        &#10;        const valueWidth = doc.getTextWidth(formattedValue);&#10;        const underlineWidth = fullWidth ? (pageWidth - startX - labelWidth - 2 - margin) : valueWidth + 4;&#10;        doc.setLineWidth(0.3);&#10;        doc.line(startX + labelWidth + 1, startY + 1, startX + labelWidth + 1 + underlineWidth, startY + 1);&#10;    };&#10;&#10;    drawField('Name of Student:', student.studentName, margin, y);&#10;    drawField('G.R No:', student.grNo, pageWidth - margin - 50, y);&#10;    y += 8;&#10;&#10;    drawField(&quot;Father's Name:&quot;, student.fatherName, margin, y, true);&#10;    y += 8;&#10;    drawField('Race and Caste (With Sub-Caste):', student.raceAndCaste, margin, y, true);&#10;    y += 8;&#10;    drawField('Religion:', student.religion, margin, y, true);&#10;    y += 8;&#10;    drawField('Place of Birth:', student.placeOfBirth, margin, y, true);&#10;    y += 8;&#10;    drawField('Date of Birth (in Figures):', formatDate(student.dateOfBirth), margin, y, true);&#10;    y += 8;&#10;    drawField('Date of Birth (in words):', student.dateOfBirthInWords, margin, y, true);&#10;    y += 8;&#10;    drawField('Last School Attended:', student.lastSchoolAttended, margin, y, true);&#10;    y += 8;&#10;    drawField('Date of Admission:', formatDate(student.admissionDate), margin, y, true);&#10;    y += 8;&#10;    drawField('Class in which admitted:', student.classInWhichAdmitted, margin, y, true);&#10;    y += 8;&#10;    drawField('Class in which studying:', student.classStudying, margin, y, true);&#10;    y += 8;&#10;&#10;    drawField('Progress:', student.progress, margin, y);&#10;    drawField('Conduct:', student.conduct, pageWidth / 2, y);&#10;    y += 8;&#10;    &#10;    drawField('Date of Leaving the School:', formatDate(student.dateOfLeaving), margin, y, true);&#10;    y += 8;&#10;    drawField('Reason of Leaving the School:', student.reasonOfLeaving, margin, y, true);&#10;    y += 12;&#10;&#10;    drawField('Examination:', student.examination, margin, y);&#10;    drawField('Under Seat No:', student.underSeatNo, margin + 80, y);&#10;    drawField('Grade:', grade || student.grade, margin + 140, y);&#10;    y += 15;&#10;    &#10;    doc.setFont('helvetica', 'bold');&#10;    doc.text('Certified that the above information is in accordance with the school General Register.', margin, y);&#10;    &#10;    // --- Footer ---&#10;    const footerYFinal = doc.internal.pageSize.getHeight() - 20;&#10;    doc.setFontSize(12);&#10;    doc.setFont('helvetica', 'normal');&#10;    drawField('Date:', format(new Date(), 'MMMM dd, yyyy'), margin, footerYFinal);&#10;&#10;    const firstAssistantText = 'First Assistant';&#10;    const chiefHeadmasterText = 'Chief Headmaster';&#10;    &#10;    const faX = pageWidth / 2 - (doc.getTextWidth(firstAssistantText) / 2);&#10;    const chX = pageWidth - margin - doc.getTextWidth(chiefHeadmasterText);&#10;&#10;    const signatureLineYFinal = footerYFinal - 2;&#10;    doc.line(faX, signatureLineYFinal, faX + doc.getTextWidth(firstAssistantText), signatureLineYFinal);&#10;    doc.line(chX, signatureLineYFinal, chX + doc.getTextWidth(chiefHeadmasterText), signatureLineYFinal);&#10;&#10;    doc.text(firstAssistantText, faX, footerYFinal);&#10;    &#10;    doc.text(chiefHeadmasterText, chX, footerYFinal);&#10;}&#10;&#10;&#10;// --- MAIN EXPORT FUNCTION ---&#10;&#10;export async function generatePdf(type: CertificateType, students: Student[], gradeOverride?: string, characterOverride?: string) {&#10;    let doc;&#10;&#10;    if (type === 'School Leaving') {&#10;        doc = new jsPDF({ orientation: 'portrait', unit: 'mm', format: 'a4' });&#10;    } else {&#10;        doc = new jsPDF({ orientation: 'landscape', unit: 'mm', format: 'a5' });&#10;    }&#10;&#10;    for (let i = 0; i &lt; students.length; i++) {&#10;        if (i &gt; 0) {&#10;            doc.addPage();&#10;        }&#10;        const student = students[i];&#10;        &#10;        switch (type) {&#10;            case 'Appearance':&#10;                await drawAppearanceCertificate(doc, student, gradeOverride);&#10;                break;&#10;            case 'Character':&#10;                await drawCharacterCertificate(doc, student, characterOverride);&#10;                break;&#10;            case 'Pass':&#10;                await drawPassCertificate(doc, student);&#10;                break;&#10;            case 'School Leaving':&#10;                await drawLeavingCertificate(doc, student, gradeOverride);&#10;                break;&#10;            default:&#10;                throw new Error('Invalid certificate type.');&#10;        }&#10;    }&#10;&#10;    return doc;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>